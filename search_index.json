[
["index.html", "RMarkdown for Scientists About this 0.1 Why write this as a book? 0.2 How to use this book", " RMarkdown for Scientists Nicholas Tierney 2019-04-23 About this This is a book on rmarkdown, aimed for scientists. It was initially developed as a 3 hour workshop, but is now developed into a resource that will grow and change over time as a living book. This book aims to teach the following: Getting started with your own R Markdown document Improve workflow: With rstudio projects Using keyboard shortcuts Export your R Markdown document to PDF, HTML, and Microsoft Word Better manage figures and tables Reference figures and tables in text so that they dynamically update Create captions for figures and tables Change the size and type of figures Save the figures to disk when creating an rmarkdown document Work with equations inline and display caption equations reference equations Manage bibliographies Cite articles in text generate bibliographies Change bibliography styles Debug and handle common errors with rmarkdown Next steps in working with rmarkdown - how to extend yourself to other rmarkdown formats 0.1 Why write this as a book? There are many great books on rmarkdown and it’s various features, such as “Rmarkdown: The definitive guide”, “bookdown: Authoring Books and Technical Documents with R Markdown”, and “Dynamic Documents with R and knitr, Second edition”, and Yihui Xie’s thesis, “Dynamic Graphics and Reporting for Statistics”. So why write a book? Good question. The answer is that writing this as a book provides a way for me to structure the content in the form of a workshop, in a way suitable for learning in a few hours. This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License. 0.2 How to use this book This book was written to provide course materials for a 3 hour course on rmarkdown. We worked through the following sections in the book in 3 hours: Why use Rmarkdown Installation what is rstudio? suggested workflow and hygiene how to use rmarkdown using rmarkdown with pdf, html, and word what are some useful keyboard shortcuts Adding captions to tables and figures Changing figures Adding mathematics Citing Figures and Tables Changing Citations and styles With the remaining sections being used as extra material, or have since been written after the course: Fixing some common problems in rmarkdown What are some alternative outputs of rmarkdown? Where to go next? Suggested references Course materials can be downloaded by using the following command from the usethis package: usethis::use_course(&quot;bit.ly/rmd4sci-monash&quot;) "],
["why-rmarkdown.html", "1 Why RMarkdown 1.1 Overview 1.2 Questions 1.3 Objectives 1.4 Your Turn 1.5 Reproducibility is a problem 1.6 Literate programming is a partial solution 1.7 Markdown as a new player to legibility 1.8 Your Turn 1.9 Rmarkdown helps complete the solution to the reproducibility problem 1.10 Summary 1.11 Learning more", " 1 Why RMarkdown The goal of this section is to briefly discuss why we want to learn rmarkdown, the benefits, and the barriers to using it. 1.1 Overview Teaching 3 minutes Exercises 5 minutes 1.2 Questions What is the value in a reproducible report? What is markdown? Can I combine my software and my writing? 1.3 Objectives Learn how to use markdown Think about why you want to use markdown 1.4 Your Turn Why are we here Form small groups of 2-4 with your neighbours and discuss how you expect learning rmarkdown might benefit you. 1.5 Reproducibility is a problem We are in a crisis at the moment where a lot of people cannot reproduce scientific work. This isn’t just a few people, and it’s not cheap. Estimates say that in the biomedical industry, in the USA, irreproducibility (not being able to reproduce a given piece of work) costs $28 Billion dollars annually.1 That’s one country, one field, and one year. So what can we do about it? 1.6 Literate programming is a partial solution The idea of literate programming shines some light on this dark area of science. This is an idea from Donald Knuth where you combine your text with your code output to create a document. This is a blend of your literature (text), and your programming (code), to create something that you can read from top to bottom. Imagine your paper - the introduction, methods, results, discussion, and conclusion, and all the bits of code that make each section. With rmarkdown, you can see all the pieces of your data analysis all together. 1.6.0.1 Some history This was a popular idea, and it has had some interesting discussion and contributions over the years. Notably, in the R ecosystem, the Sweave (S+weave) program provided a way to write text and code together. As with any technology, there were some speedbumps with using Sweave, and some of the reasons we are not teaching it now is because: It uses a form of LaTeX, which provides great flexibility at the cost of complexity. Printing figures involves additional work There isn’t a way to save (cache) your work. Every analysis has to be repeated from start to finish. This was time consuming. 1.7 Markdown as a new player to legibility In 2004, John Gruber, of daring fireball created a markdown, a simple way to create text that rendered into a HTML webpage. 1.7.1 A brief example of markdown For example, - bullet list - bullet list - bullet list 1. numbered list 2. numbered list 3. numbered list __bold__, **bold**, _italic_, *italic* &gt; quote of something profound ```r # computer code goes in three back ticks 1 + 1 2 + 2 ``` Would be converted to: bullet list bullet list bullet list numbered list numbered list numbered list bold, bold, italic, italic quote of something profound # computer code goes in three back ticks 1 + 1 ## [1] 2 2 + 2 ## [1] 4 With very little marking up, we can create rich text, that actually resembles the text that we want to see. Some other nice features of markdown include: thing markdown rendered superscript 2^nd^ 2nd subscript CO~2~ CO2 strikethrough ~~mistake~~ mistake links [text](http:://www.example.com/your-link-goes-here) text images ![alternative text](link) 1.8 Your Turn Learn to use markdown In your small groups, spend five minutes working through this brief online markdown tutorial 1.9 Rmarkdown helps complete the solution to the reproducibility problem So, how do we combine this with our R code, into a literate programming environment? Rmarkdown provides an environment where you can write your complete analysis, and marries your text, and code together into a rich document. You write your code as code chunks, put your text around that, and then hey presto, you have a document you can reproduce. For example, look at the following report: How did we generate it? --- title: &quot;Exploring gapminder&quot; author: &quot;Nicholas Tierney&quot; output: html_document --- ```{r library, message = FALSE} library(tidyverse) library(broom) ``` ``{r data-read-in, message = FALSE} data &lt;- read_csv(here::here(&quot;data/oz_gapminder.csv&quot;)) ``` # Introduction let&#39;s look at the lifespan ``{r hist-life-exp} hist(data$lifeExp) ``` Let&#39;s fit a simple linear model of the effect of year on life expectancy ``{r example-lm} fit &lt;- lm(lifeExp ~ year, data = data) fit ``` And let&#39;s look at the coefficient table: ``{r coef-table} library(broom) fit_coef &lt;- tidy(fit) knitr::kable(fit_coef, caption = &quot;A table of the coefficients&quot;) ``` The effect of year on life expectancy is `r fit_coef$estimate[2]`. We render this code and it creates this report! It has a plot, it has a table, we even refer to some of the values in the text - the last line of the report looks at the effect of year. But what if the data changes? At the moment we are looking at only Australia - say we get the full dataset, what happens then? Say you’d created your report by hand in microsoft word, and with a graphical user interface software. You would need to: Go back to the GUI, re run the analysis Import the results into excel Create your graph copy the graph into word copy the results of the coefficients into the text copy the results of the coefficient table into the text. This is painful. And what if someone wants to know exactly how you did your analysis? This process isn’t exactly sharable. But if you did it in rmarkdown? Just update the data, and render the document again, and get an updated document: The results are different! And we just pointed it to some different data. Then re-rendered it. That’s it. That is why we use rmarkdown. 1.10 Summary In this section we’ve learned about: What the value is in a reproducible report What is markdown How to combine software and writing How to use markdown 1.11 Learning more rstudio’s rmarkdown cheatsheet Bookdown’s section on markdown syntax The article, Freedman, 2010, Heard via Garret Grolemund’s great talk↩ "],
["installation.html", "2 Installation 2.1 Overview 2.2 Questions 2.3 Software Setup 2.4 RMarkdown 2.5 A note on PDF 2.6 Test Script", " 2 Installation In this section, the aim is to have everyone setup with R, RStudio, and RMarkdown. 2.1 Overview *Duration 15 minutes 2.2 Questions How do I install R? How do I install rmarkdown? How do I install LaTeX in a sane way? 2.3 Software Setup 2.3.1 R 2.3.1.1 Windows https://cloud.r-project.org/bin/windows/ 2.3.1.2 MacOS https://cloud.r-project.org/bin/macosx/ 2.3.1.3 Linux https://cloud.r-project.org/bin/linux/ 2.3.2 RStudio https://www.rstudio.com/products/rstudio/download/#download 2.4 RMarkdown To ensure you are up to date, run the following script to install the packages. install.packages(&quot;rmarkdown&quot;) install.packages(&quot;knitr&quot;) install.packages(&quot;tinytex&quot;) install.packages(&quot;here&quot;) install.packages(&quot;tidyverse&quot;) install.packages(&quot;broom&quot;) install.packages(&quot;fs&quot;) 2.5 A note on PDF rmarkdown documents can be compiled to PDF, which is a great feature. In order to convert the documents to PDF, they use a software called LaTeX (\\(\\LaTeX\\)) (pronounced la-tek or lay-tek). Installing LaTeX can be a pain, but thankfully there is an easier way to instlal it - tinytex. tinytex is an R package that installs a sane, lightweight (&lt;200Mb) version of LaTeX. tinytex::install_tinytex() If you get the following error, this is good! As it means that TeX has already been installed: Error: Detected an existing tlmgr at /usr/local/bin/tlmgr. It seems TeX Live has been installed (check tinytex::tinytex_root()). You have to uninstall it, or use install_tinytex(force = TRUE) if you are sure TinyTeX can override it (e.g., you are a PATH expert or installed TinyTeX previously). 2.5.1 Problem solving with \\(\\LaTeX\\) If you have any problems with installing tinytex, I reccomend you check out the tinytex FAQ page. 2.6 Test Script You should be able to fun the following code on your machine library(rmarkdown) library(knitr) library(tidyverse) "],
["rstudio-what-and-why.html", "3 RStudio, What and Why 3.1 Overview 3.2 Questions 3.3 Objectives 3.4 What is RStudio, and why should I use it? 3.5 Exercise: RStudio default options 3.6 Learning more", " 3 RStudio, What and Why 3.1 Overview Teaching 5 minutes Exercises 2 minutes 3.2 Questions What is RStudio? Why should I use RStudio? What features should I change? 3.3 Objectives Get familiarised with RStudio, get set up with not storing session info Download the course materials for the workshop 3.4 What is RStudio, and why should I use it? If R is the engine and bare bones of your car, then RStudio is like the rest of the car. The engine is super critical part of your car. But in order to make things properly functional, you need to have a steering wheel, comfy seats, a radio, rear and side view mirrors, storage, and seatbelts. The RStudio layout has the following features: On the upper left, the Rmarkdown script On the lower left The R console On the lower right the view for files, plots, packages, help, and viewer. On the upper right, the environment / history pane Figure 3.1: A screenshot of the RStudio working environment. We saw a bit of what an rmarkdown script does. The R console is the bit where you can run your code. This is where the R code in your rmarkdown document gets sent to run. The file/plot/pkg viewer is a handy browser for your current files, like finder, or file explorer, plots are where your plots appear, you can view packages, see the help files. And the environment / history pain contains the list of things you have created, and the past commands that you have run. 3.5 Exercise: RStudio default options To first get set up, I highly recommend changing the following setting Tools &gt; Global Options (Or Cmd + ,) Under the General tab: For workspace Uncheck restore .RData into workspace at startup Save workspace to .RData on exit : “Never” For History Uncheck &quot;Always save history (even when not saving .RData) Uncheck “Remove duplicate entries in history” Figure 3.2: Setting the options right for rstudio, so you don’t restore previous sessions work, and don’t save it either. This means that you won’t save the objects and other things that you create in your R session and reload them. This is important for two reasons Reproducibility: you don’t want to have objects from last week cluttering your session Privacy: you don’t want to save private date or other things to your session. You only want to read these in. Your “history” is the commands that you have entered into R. Additionally, not saving your history means that you won’t be relying on things that you typed in the last session, which is a good habit to get into! 3.6 Learning more rstudio IDE cheatsheet "],
["workflow.html", "4 Workflow 4.1 Overview 4.2 Questions 4.3 Objectives 4.4 Your Turn 4.5 When you start a new project: Open a new RStudio project 4.6 What is a file path? 4.7 Your Turn 4.8 Is there an answer to the madness? 4.9 Your Turn: Use your own rstudio project 4.10 Your turn 4.11 The “here” package 4.12 Remember 4.13 Summary", " 4 Workflow Before we start with rmarkdown, we need to make sure that you understand file storage hygiene. This helps you keep your files, paths, and directories clean, which prevents unexpected problems. It will make you more productive in the future because you’ll spend less time fighting against file paths. Not sure what a file path is? We explain that as well. 4.1 Overview Teaching 10 minutes Exercises 10 minutes 4.2 Questions Where should I put all my files? What is an RStudio project, anyway? What is a file path? 4.3 Objectives Understand what a file path is Set up an RStudio Project to organise your work Put some data in your project to set up the next tasks 4.4 Your Turn In groups of 2-4 discuss: What your normal “workflow” is for starting a new project Possible challenges that might arise when maintaining your project 4.5 When you start a new project: Open a new RStudio project This section is heavily influenced by Jenny Bryan’s great blog post on project based workflows. Sometimes this is the first line of an R Script or R markdown file. setwd(&quot;c:/really/long/file/path/to/this/directory) 4.5.0.1 Question What do you think the setwd code does? 4.5.1 So what does this do? This says, “set my working directory to this specific working directory”. It means that you can read in data and other things like this: data &lt;- read_csv(&quot;data/mydata.csv&quot;) Instead of data &lt;- read_csv(&quot;c:/really/long/file/path/to/this/directory/data/mydata.csv&quot;) So while this has the effect of making the file paths work in your file, it is a problem. It is a problem because, among other things, using setwd() like this: Has 0% chance of working on someone else’s machine (this includes you in &gt;6 months) Your file is not self-contained and portable. (Think: “What if this folder moved to /Downloads, or onto another machine?”) So, to get this to work, you need to hand edit the file path to your machine. This is painful. And when you do this all the time, it gets old, fast. 4.6 What is a file path? So, this might all be a bit confusing if you don’t know what a file path is. Briefly, a file path is the machine-readable directions to where files on your computer live. So, the file path: Users/njtierney/rmd4sci-materials/demo-gapminder.Rmd Describes the location of the file “demo-gapminder.Rmd”. This could be visualised as: users └── njtierney └── Desktop └── rmd4sci-materials └── demo.R └── exercises └── exploratory-data-analysis └── eda-document.Rmd └── eda-script.R └── data └── gapminder.csv So, if you want to read in the gapminder.csv file, you might need to write code like this: gapminder &lt;- read_csv(&quot;Users/njtierney/Desktop/rmd4sci-materials/data/gapminder.csv&quot;) As we now know, this is a problem, because this is not portable code. If you have an RStudio project file inside the rmd4sci-materials folder, you can instead write the following: gapminder &lt;- read_csv(&quot;data/gapminder.csv&quot;) 4.7 Your Turn (1-2 minutes) What folders are above the health.csv file in the following given string? &quot;users/miles/etc1010/week1/data/health.csv&quot; What would be the result of using the following code in demo-gapminder.Rmd, and then using the code, and then moving this to another location, say inside your C drive? setwd(&quot;Downloads/etc1010/week1/week1.Rmd) 4.8 Is there an answer to the madness? This file path situation is a real pain. Is there an answer to the madness? The answer is yes! I highly recommend when you start on a new idea, new research project, paper. Anything that is new. It should start its life as an rstudio project. An rstudio project helps keep related work together in the same place. Amongst other things, they: Keep all your files together Set the working directory to the project directory Starts a new session of R Restore previously edited files into the editor tabs Restore other rstudio settings Allow for multiple R projects open at the same time. This helps keep you sane, because: Your projects are each independent. You can work on different projects at the same time. Objects and functions you create and run from project idea won’t impact one another. You can refer to your data and other projects in a consistent way. And finally, the big one RStudio projects help resolve file path problems, because they automatically set the working directory to the location of the rstudio project. Let’s open one together. 4.9 Your Turn: Use your own rstudio project Run the following code to start a new rstudio project called “rmd4sci-monash” usethis::use_course(&quot;bit.ly/rmd4sci-monash&quot;) Follow the prompts to download this to your desktop and then run the rstudio project. (You can move it later if you like!) You are now in an rstudio project! 4.10 Your turn Run the code inside the demo.R document Why does the read_csv code work? Run the code inside the exploratory-data-analysis folder - eda-script.R. Does the read_csv code work? 4.11 The “here” package Although tStudio projects help resolve file path problems, in some cases you might have many folders in your r project. To help navigate them appropriately, you can use the here package to provide the full path directory, in a compact way. here::here(&quot;data&quot;) returns [1] &quot;/Users/njtierney/Desktop/rmd4sci-materials/data&quot; And here::here(&quot;data&quot;, &quot;gapminder.csv&quot;) returns [1] &quot;/Users/ntie0001/Desktop/rmd4sci-materials/data/gapminder.csv&quot; You can read the above here code as: In the folder data, there is a file called health.csv, can you please give me the full path to that file? This is really handy for a few reasons: It makes things completely portable Rmarkdown documents have a special way of looking for files, this helps eliminate file path pain. If you decide to not use RStudio projects, you have code that will work on any machine 4.12 Remember If the first line of your R script is setwd(&quot;C:\\Users\\jenny\\path\\that\\only\\I\\have&quot;) I will come into your office and SET YOUR COMPUTER ON FIRE 🔥. – Jenny Bryan 4.12.1 Aside: Creating an RStudio project You can create an rstudio project by going to: file &gt; new project &gt; new directory &gt; new project &gt; name your project &gt; create project. You can also click on the create project button in the top left corner Then go to new directory, if it is a new folder - otherwise if you have an existing folder you have - click on existing directory. Then go to new project Then write the name of your project. I think it is usually worthwhile spending a bit of time thinking of a name for your project. Even if it is only a few minutes, it can make a difference. You want to think about: keeping it short no spaces combining words For example, I have a project looking at bat calls, so I called it screech, because bats make a screech-y noise. And click “create project”. Done! 4.13 Summary In this lesson we’ve: Learnt what file paths are How to setup an rstudio project How to construct full file paths with the here package "],
["using-rmarkdown.html", "5 Using Rmarkdown 5.1 Overview 5.2 Questions 5.3 Objectives 5.4 The anatomy of an rmarkdown document 5.5 Code chunk options 5.6 Creating an rmarkdown document 5.7 Working with an rmarkdown document 5.8 Nick’s rmarkdown hygiene reccommendations 5.9 Your Turn", " 5 Using Rmarkdown Now that we’ve covered how to organise your project, have some data, and talked a bit about what rmarkdown is, let’s talk about using it. 5.1 Overview Teaching 10 minutes Exercises 10 minutes 5.2 Questions How should I start an rmarkdown document? What do I put in the YAML metadata? How do I create a code chunk? What sort of options to I need to worry about for my code? 5.3 Objectives Create an rmarkdown document, do some basic exploration 5.4 The anatomy of an rmarkdown document This is an rmarkdown document (demo). It has three parts: Metadata (YAML) Text (markdown formatting) Code (code formatting) 5.4.1 Metadata The metadata of the document tells you how it is formed - what the title is, what date to put, and other control information. If you’re familiar with LaTeX, this is kind of like how you specify the many options, what sort of document it is, what styles to use, etc at the front matter. Rmarkdown documents use YAML (Yet Another Markup Language) to provide the metadata. It looks like this. --- title: &quot;An example document&quot; author: &quot;Nicholas Tierney&quot; output: html_document --- It starts an ends with three dashes ---, and has fields like the following: title, author, and output. The options in the YAML are actually passed down into the render function under the hood. This means that: output: html_document: toc: true toc_depth: 2 is the same as: html_document(toc = TRUE, toc_depth = 2) 5.4.2 Text Is markdown, as we discussed in the earlier section, It provides a simple way to mark up text - bullet list - bullet list - bullet list 1. numbered list 2. numbered list 3. numbered list __bold__, **bold**, _italic_, *italic* &gt; quote of something profound ```r # computer code goes in three back ticks 1 + 1 2 + 2 ``` Would be converted to: bullet list bullet list bullet list numbered list numbered list numbered list bold, bold, italic, italic quote of something profound # computer code goes in three back ticks 1 + 1 ## [1] 2 2 + 2 ## [1] 4 5.4.3 Code We refer to code in an rmarkdown document in two ways, code chunks, and inline code. 5.4.3.1 Code chunks Code chunks are marked by three backticks and curly braces with r inside them: ```{r chunk-name} # a code chunk ``` a backtick is a special character you might not have seen before, it is typically located under the tilde key (~). On USA / Australia keyboards, is under the escape key: Figure 5.1: image from https://commons.wikimedia.org/wiki/File:ANSI_Keyboard_Layout_Diagram_with_Form_Factor.svg 5.4.4 Chunk names Every chunk should ideally have a name. As I’ve mentioned earlier, naming things is hard, but follow these rules and you’ll be fine: one word that describes the action (e.g., “read”) one word that describes the thing inside the code (e.g, “gapminder”) separate words with “-” or &quot;_&quot; (e.g., read-gapminder) 5.5 Code chunk options You can control how the code is output by changing the code chunk options which follow the title. ```{r read-gapminder, eval = FALSE, echo = TRUE} gap &lt;- read_csv(&quot;gapminder.csv&quot;) ``` The ones that you need to know about right now are: cache: TRUE / FALSE. Do you want to save the output of the chunk so it doesn’t have to run next time? eval: Do you want to evaluate the code? echo: Do you want to print the code? include: Do you want to include code output in the final output document? Setting to FALSE means nothing is put into the output document, but the code is still run. You can read more about the options at the official documentation: https://yihui.name/knitr/options/#code-evaluation 5.5.1 Inline code Sometimes you want to run the code inside a sentence. When the code is run inside the sentence, it is called running the code “inline”. You might want to run the code inline to name the number of variables or rows in a dataset in a sentence like: There are XXX observations in the airquality dataset, and XXX variables. You can call code “inline” like so: There are `r nrow(airquality) ` observations in the airquality dataset, and `r &#39;ncol(airquality) ` variables. Which gives you the following sentence There are 153 observations in the airquality dataset, and 6 variables. What’s great about this is that if your data changes upstream, then you don’t need to work out where you mentioned your data, you just update the document. 5.6 Creating an rmarkdown document Rstudio menu system Explore the template provided by rstudio Compile an rmarkdown document 5.7 Working with an rmarkdown document Demo: Create an rmarkdown document in rstudio. 5.7.1 Your Turn Use the rstudio project you previously created, rmd4sci-materials, and create an rmarkdown document Run some brief summaries of the data in the rmarkdown document inside the ` hist(data$) How big is the data? How many countries are there? What was the lowest life expectancy in Australia’s History? How about the lowest GDP for Australia? Where does Australia rank in GDP in 1999? 5.8 Nick’s rmarkdown hygiene reccommendations I highly recommend that each document you write has three chunks at the top. ```{r setup , include=FALSE} knitr::opts_chunk$set(echo = FALSE, fig.align = &quot;center&quot;, fig.width = 4, fig.height = 4, dev = &quot;png&quot;, cache = TRUE) ``` ```{r library} library(tidyverse) ``` ```{r functions} # A function to scale input to 0-1 scale_01 &lt;- function(x){ (x - min(x, na.rm = TRUE)) / diff(range(x, na.rm = TRUE)) } ``` ```{r read-data} gapminder &lt;- read_csv(here::here(&quot;data&quot;, &quot;gapminder.csv&quot;)) ``` In the setup chunk, you set the options that you want to define globally. In this case, I’ve told rmarkdown: echo = FALSE: I don’t want any code printed by setting echo = FALSE. fig.align = &quot;center&quot; Align my figures in the center fig.width = 4 &amp; fig.height = 4. Set the width and height to 4 inches. dev = &quot;png&quot;. Save the images as PNG cache = TRUE. Save the output results of all my chunks so that they don’t need to be run again. In the library chunk, you put all the library calls. This helps make it clearer for anyone else who might read your work what is needed to run this document. I often go through the process of moving these library calls to the top of the document when I have a moment, or when I’m done writing. You can also look at Miles McBain’s packup package to help move these library calls to the top of a document. In the functions chunk, you put any functions that you write in the process of writing your document. Similar to the library chunk, I write these functions as I go, as needed, and them move these to the top when I get a moment, or once I’m done. The benefit of this is that all your functions are in one spot, and you might be able to identify ways to make them work better together, or improve them separately. You might even want to move these into a new R package, and putting them here makes that easier to see what you are doing. In the readr chunk, you read in any data you are going to be using in the document. Now, this is my personal preference, but I find the following benefits: The “top part” of your document contains all the metadata / setup info. Your global options, It helps another person get oriented with your work - they know the settings, the functions used, and the special things that you wrote (your functions) Remember, “another person” includes yourself in 6 months. 5.9 Your Turn Update your rmarkdown document based on the aforementioned hygiene steps discussed by Nick. "],
["html-pdf-and-word-and-more.html", "6 HTML, PDF, and Word (and more!) 6.1 Overview 6.2 Questions 6.3 Objectives 6.4 How do I convert to HTML, PDF, or Word? 6.5 Your Turn", " 6 HTML, PDF, and Word (and more!) One of the really great, powerful things about rmarkdown is that we can convert it to many different output types. The top three that you might be most likely to use are HTML, PDF, and Microsoft Word. There are others that we can discuss later. In this section, we are going to briefly discuss how to render to these output formats, and some things that you might want to do for each of them. 6.1 Overview Teaching: 10 minutes Exercises: 15 minutes 6.2 Questions How do I convert to HTML, PDF, or Word? How do I set options specific to each of these? How can I include a screenshot of an interactive graphic in PDF or Word? 6.3 Objectives 6.4 How do I convert to HTML, PDF, or Word? Here are three ways to do this: You can control this in the “knit” button knitr::include_graphics(&quot;figs/rstudio-knit-button&quot;) You might notice that depending on the option you select, this changes things in the YAML - which is another way to control which output you have: You can change the YAML option title: &quot;Exploring gapminder&quot; output: html_document title: &quot;Exploring gapminder&quot; output: pdf_document title: &quot;Exploring gapminder&quot; output: word_document And if we remember from the previous lesson, the information in the YAML is passed into the render function: You can call the render function. rmarkdown::render(&quot;example.Rmd&quot;, output_format = &quot;html_document&quot;) rmarkdown::render(&quot;example.Rmd&quot;, output_format = &quot;pdf_document&quot;) rmarkdown::render(&quot;example.Rmd&quot;, output_format = &quot;word_document&quot;) 6.4.1 A note on workflow with rmarkdown: HTML first, PDF/word later It can be easy to get caught up with how your document looks. I highly recommend avoiding compiling to PDF or word until you really need to. This is also recommended by the author of rmarkdown and knitr, Yihui Xie. Because HTML doesn’t have page breaks, this means that you can spend time working on generating content, and not trying to get figures to line up correctly. 6.5 Your Turn Generate three reports, one as HTML, one as PDF, and one as microsoft word. Remember, if you are having PDF problems, see the installation chapter note on installing \\(\\LaTeX\\) with the R package, tinytex. "],
["keyboard-shortcuts.html", "7 Keyboard Shortcuts 7.1 Overview 7.2 Questions 7.3 Objectives 7.4 Gifs of the action 7.5 Table of Common Shortcuts 7.6 Further Reading 7.7 Your Turn", " 7 Keyboard Shortcuts Keyboard shortcuts tend to make our lives easier. Some that you might already be familiar with in day to day life include quickly saving (Cmd + S or Ctrl + S), or Undo (Cmd + Z or Ctrl + Z). There are many keyboard shortcuts that you can access in R, this section provides a brief tour of them, and why you might want to use them. 7.1 Overview Teaching 5 minutes Exercises 5 minutes 7.2 Questions What sort of keyboard shortcuts should I care about? 7.3 Objectives 7.4 Gifs of the action 7.4.1 Knit document 7.4.2 Insert Chunk 7.4.3 Run Current Chunk 7.4.4 Jump to 7.4.5 Create multiple cursors 7.4.6 Delete the current line 7.4.7 Un/Comment out a line 7.4.8 Reformat Section 7.4.9 Show Keyboard Shortcut Reference 7.5 Table of Common Shortcuts Below is a small table of tasks you can perform with keyboard Action Windows/Linux Mac Knit document Ctrl + Shift + K Cmd + Shift + K Insert Chunk Ctrl + Alt + I Cmd + Option + I Run Current Chunk Ctrl + Alt + C Cmd + Option + C Jump to Shift+Alt+J Cmd+Shift+Option+J Show Keyboard Shortcut Reference Alt+Shift+K Option+Shift+K Create multiple cursors Ctrl + Alt + Up/Down option + control + Up/Down Delete the current line Ctrl + D Cmd + D Un/Comment out a line Ctrl + Shift + C Cmd + Shift + C Reformat Section Ctrl + Shift + A Cmd + Shift + A 7.6 Further Reading The https://www.rstudio.com/wp-content/uploads/2016/01/rstudio-IDE-cheatsheet.pdf has an index of shortcuts. This [https://support.rstudio.com/hc/en-us/articles/206382178-Customizing-Keyboard-Shortcuts] help file has a guide to customising keyboard shortcuts. 7.7 Your Turn Using the Keyboard Shortcut Reference, find the keyboard shortcut for inserting a pipe character ( %&gt;% ) Spend 3 minutes practicing these commands in a document. "],
["figures-tables-captions-.html", "8 Figures, Tables, Captions. 8.1 Overview 8.2 Questions 8.3 Objectives 8.4 Tables 8.5 Figures 8.6 Summary", " 8 Figures, Tables, Captions. You need figures and tables in your own writing, whether it be a journal paper, an internal document, or some documentation. In this section, we discuss how to add figures and tables into your rmarkdown document, and how to provide captions for them. 8.1 Overview Teaching 10 minutes Exercises 10 minutes 8.2 Questions How do I create a figure in rmarkdown? How do I create a table in rmarkdown? How do I add captions for figures and tables? 8.3 Objectives 8.4 Tables To produce a table, I recommend you use the kable function from the knitr package. 8.4.1 Demo kable takes a data.frame as input, and outputs the table into a markdown table, which will get rendered into the appropriate output format. For example, let’s say we wanted to share the first 6 rows of our gapminder data. This gives us the following output top_gap &lt;- head(gapminder) knitr::kable(top_gap) country continent year lifeExp pop gdpPercap Afghanistan Asia 1952 28.801 8425333 779.4453 Afghanistan Asia 1957 30.332 9240934 820.8530 Afghanistan Asia 1962 31.997 10267083 853.1007 Afghanistan Asia 1967 34.020 11537966 836.1971 Afghanistan Asia 1972 36.088 13079460 739.9811 Afghanistan Asia 1977 38.438 14880372 786.1134 So how does that work? kable prints out the following: |country |continent | year| lifeExp| pop| gdpPercap| |:-----------|:---------|----:|-------:|--------:|---------:| |Afghanistan |Asia | 1952| 28.801| 8425333| 779.4453| |Afghanistan |Asia | 1957| 30.332| 9240934| 820.8530| |Afghanistan |Asia | 1962| 31.997| 10267083| 853.1007| |Afghanistan |Asia | 1967| 34.020| 11537966| 836.1971| |Afghanistan |Asia | 1972| 36.088| 13079460| 739.9811| |Afghanistan |Asia | 1977| 38.438| 14880372| 786.1134| And this then gets rendered as a table. This works for HTML, PDF, and word! 8.4.1.1 Adding captions to a table Now, say that we wanted to include a caption? We use the caption argument. knitr::kable(top_gap, caption = &quot;The first 6 rows of the dataset, gapminder&quot;) Table 8.1: The first 6 rows of the dataset, gapminder country continent year lifeExp pop gdpPercap Afghanistan Asia 1952 28.801 8425333 779.4453 Afghanistan Asia 1957 30.332 9240934 820.8530 Afghanistan Asia 1962 31.997 10267083 853.1007 Afghanistan Asia 1967 34.020 11537966 836.1971 Afghanistan Asia 1972 36.088 13079460 739.9811 Afghanistan Asia 1977 38.438 14880372 786.1134 Some other useful features of kable include setting the rounding number, with the digits option. For example, we could present the first 2 digits of each number like so: knitr::kable(top_gap, caption = &quot;The first 6 rows of the dataset, gapminder&quot;, digits = 2) Table 8.2: The first 6 rows of the dataset, gapminder country continent year lifeExp pop gdpPercap Afghanistan Asia 1952 28.80 8425333 779.45 Afghanistan Asia 1957 30.33 9240934 820.85 Afghanistan Asia 1962 32.00 10267083 853.10 Afghanistan Asia 1967 34.02 11537966 836.20 Afghanistan Asia 1972 36.09 13079460 739.98 Afghanistan Asia 1977 38.44 14880372 786.11 There are other options that you can set in kable, but for these options will get you through a large majority of what you need. For more information on what kable can provide, see ?knitr::kable. There are many different ways to produce tables in R. We have chosen to show kable today because kable is minimal, but powerful. If you want to extend kable to do more, look at kableExtra, in particular the option kableExtra::kable_styling(latex_options = c(&quot;hold_position&quot;)). 8.4.2 Your Turn Create a summary of your gapminder data, and put it into a table. Add a caption to this table Set the number of decimals to 2. 8.5 Figures Printing figures is probably my favourite feature of rmarkdown. It is actually relatively straightforward in the case of plots. You provide the plot you want to show in a code chunk! 8.5.0.1 Demo For example, I can print a plot of the gapminder data for Australia like so: library(ggplot2) library(dplyr) ## ## Attaching package: &#39;dplyr&#39; ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union gapminder %&gt;% filter(country == &quot;Australia&quot;) %&gt;% ggplot(aes(x = year, y = lifeExp)) + geom_point() 8.5.1 Captions for figures Inserting a caption for a figure is a little bit different. The caption argument is controlled in the chunk option, under the option, fig.cap. So to insert a figure, we do the following. ``{r gg-oz-gapminder, fig.cap = &quot;Life expectancy from 1952 - 2007 for Australia. Life expentancy increases steadily except from 1962 to 1969. We can safely say that our life expectancy is higher than it has ever been!&quot;} library(ggplot2) library(dplyr) gapminder %&gt;% filter(country == &quot;Australia&quot;) %&gt;% ggplot(aes(x = lifeExp, y = year)) + geom_point() ``` Which would produce the following output library(ggplot2) library(dplyr) gapminder %&gt;% filter(country == &quot;Australia&quot;) %&gt;% ggplot(aes(x = lifeExp, y = year)) + geom_point() Figure 8.1: Life expectancy from 1952 - 2007 for Australia. Life expentancy increases steadily except from 1962 to 1969. We can safely say that our life expectancy is higher than it has ever been! 8.5.2 Your Turn Create a plot with your .Rmd doc Add a figure caption 8.5.3 Inserting images We cannot always generate the graphics that we want - for example, we might have an image of something that we want to show, or perhaps a nice flowchart someone else made. In our case, say we wanted to insert the new SSA logo into our document, there are two ways we can do this. With markdown syntax with knitr::include_graphics() Markdown syntax The markdown syntax to insert an image is: ![caption](&quot;path/to/image&quot;) 8.5.3.1 Demo So we could insert the new SSA vic logo by doing the following: ``` ![SSA Logo!](bit.ly/ssa-vic) ``` Which would give us the following output: SSA Logo! But say that we want more control over the output, like we want to center the image, and we want to make it smaller? Then you can use knitr::include_graphics(), and control the figure size using the options out.width, and add a caption with fig.cap. ``{r ssa-logo, fig.align = &#39;center&#39;, out.width = &quot;25%&quot;, fig.cap = &quot;The new SSA logo, which is actually a scatterplot, which is super neat!&quot;} knitr::include_graphics(here::here(&quot;figs&quot;, &quot;ssa-logo.png&quot;)) ``` knitr::include_graphics(here::here(&quot;figs&quot;, &quot;ssa-logo.png&quot;)) Figure 8.2: The new SSA logo, which is actually a scatterplot, which is super neat! ` 8.5.4 Your Turn Download the gapminder logo and put it into a new directory call “figs” Insert this image into your rmarkdown document around where you introduce gapminder. 8.6 Summary We’ve now learned how to insert tables, plots, and images into our documents! "],
["customising-your-figures.html", "9 Customising your figures 9.1 Overview 9.2 Questions 9.3 Objectives 9.4 Which chunk options should you care about for this? 9.5 Setting global options 9.6 Keeping your figures 9.7 Your Turn 9.8 Further Reading", " 9 Customising your figures When you produce figures, you usually want to tweak them a little bit. A bit wider, perhaps a bit taller. Perhaps a different image type other than “png”, because the journal requires “TIFF” or “EPS”. Maybe you need 600dpi because you’re going to print it really big. So, how do you control these features? You can control the size and features of figures with the chunk options. In this section, we are going to talk more specifically about how to customise your figures. 9.1 Overview Teaching 10 minutes Exercises 10 minutes 9.2 Questions How do I change the height and width of a figure? How to I change the type of output of a figure? (e.g., PDF, TIFF, PNG, JPG, SVG) Can I set all the figure features globally? How do I save the figures? 9.3 Objectives Learn how to set individual figure height, width, aspect, and print size Learn how to set global parameters for your chunks Get a copy of all of your figures 9.4 Which chunk options should you care about for this? There are many chunk options that control your output, but only a few that you really need to worry about for your figures: fig.align: How do you want your figure aligned? Takes one of the following inputs: “default”, “center”, “left”, or “right”? (demo) fig.cap: Would you like a caption for your figure? It takes a character vector as input: “My Amazing Graph” fig.height &amp; fig.width: How tall and wide would you like your figure in inches? Takes one number (e.g., 7, or 9) out.height &amp; out.width: The height and width of your plot in the final file. This can be handy if you like the current aspect ratio of your plot, but you want to shrink it by say 50% - which you would do with “50%”. You can also include LaTeX output or HTML output. Say for example, “.8//linewidth” or “8cm” for LaTeX, or “300px” for HTML. For demonstration purposes, let’s take a plot from earlier and show how it’s output can change. with fig.height, fig.width, out.width, dev 9.4.1 Your Turn Open exercise ecercises/02-rmd-figures-chunks/02-rmd-figures-chunks.Rmd Create three figures, each with the following attributes: 2x2 10x10 4x7 “center” “out.width = 50%” 9.5 Setting global options If we repeat adding the same chunk options for each figure, we might want to consider setting them globally. We can do this with the following code: knitr::opts_chunk$set(chunk_option1 = TRUE, ...) (As mentioned earlier), I typically set this up in a code chunk at the start of a document. 9.5.1 Your Turn Set the global options in your document to set: fig.height figh.width dev 9.6 Keeping your figures You can set the options for your figures, which will change how they appear on the page, but this won’t save the figures anywhere. In order to save the figures to file, you need to et the YAML option keep_md: true: --- title: &quot;Awesome report&quot; author: &quot;You&quot; output: html_document: keep_md: true --- 9.7 Your Turn Save your images in your document by setting keep_md: true 9.8 Further Reading Official knitr documentation "],
["math.html", "10 Math 10.1 Overview 10.2 Questions 10.3 Objectives 10.4 Some history 10.5 Anatomy of Equations 10.6 Example math commands 10.7 Exercise 10.8 Further Reading:", " 10 Math Want to include equations in your writing? Easy. rmarkdown supports LaTeX style equation writing. This section introduces the two types equations, inline, and display form, and how to number equations. 10.1 Overview Teaching: 10 minutes Exercises: 10 minutes 10.2 Questions How to I create an equation? LaTeX is funky, what are the basic math commands? 10.3 Objectives 10.4 Some history Equation editing was first made available in TeX, which later become LaTeX, named after Leslie Lamport. 10.5 Anatomy of Equations This section shows you some basic equations types that you want to be familiar with. Inline equations are referenced by a pair of dollar signs: $. So this text would have an equation here $ E = mc^2$ Generates: So this text would have an equation here $ E = mc^2$ Display equations are referenced by two pairs of dollar signs: $$ E = mc^2 $$ \\[ E = mc^2 \\] 10.5.0.1 Viewing equations Understanding whether or not you have created the right equation can be difficult. Rstudio provides previews of your equations in text (demo). 10.6 Example math commands LaTeX is an amazing language, but understanding how to create the equations can be (more than) a bit confusing at times. This section demonstrates some example equations that you might be familiar with. 10.6.0.1 Fractions \\[ \\frac{1}{2} \\] 10.6.0.2 Sub and Super Scripts \\[ Y = X_1 + X_2 \\] \\[ a^2 + b^2 = c^ \\] 10.6.0.3 Square roots \\[ \\sqrt{p} \\] \\[ x = \\frac{-b \\pm \\sqrt{b^2 - 4ac}}{2a} \\] 10.6.0.4 Summations \\[ \\sum_{i = 1}^{n}{(\\bar{x} - x_i)^2} \\] #### Bayes Rule \\[ Pr(\\theta | y) = \\frac{Pr(y | \\theta) Pr(\\theta)}{Pr(y)} \\] \\[ Pr(\\theta | y) \\propto Pr(y | \\theta) Pr(\\theta) \\] 10.6.0.5 Linear Model \\[ Y \\sim X\\beta_0 + X\\beta_1 + \\epsilon \\] \\[ \\epsilon \\sim N(0,\\sigma^2) \\] 10.7 Exercise Add some math to your example document 10.8 Further Reading: https://bookdown.org/yihui/bookdown/markdown-extensions-by-bookdown.html#equations https://oeis.org/wiki/List_of_LaTeX_mathematical_symbols "],
["start.html", "11 Citing Figures, Tables &amp; Sections 11.1 Overview 11.2 Questions 11.3 Objectives 11.4 How to refer to tables and figures in text? 11.5 Your Turn 11.6 Referencing a figure 11.7 Referencing a table 11.8 Referencing a section", " 11 Citing Figures, Tables &amp; Sections When you’re writing a report, you often refer to a table or figure in text. Australia’s life expectancy has increased a great deal over the past 50 years (Figure 1) Figure 1. Life expectancy from 1952 - 2007 for Australia. Life expentancy increases steadily except from 1962 to 1969. We can safely say that our life expectancy is higher than it has ever been! And sure, this is figure 1. But what happens if actually, that figure should be moved later in the paper? You need to do the following: Update the reference to figure 1 in the text. Update the figure 1 caption to not say figure 1. This is fine. Once. But it is never once. After this, it is frustrating, and error prone. There is a way to solve this, which this lesson discusses. 11.1 Overview Teaching 10 minutes Exercises 15 minutes 11.2 Questions How do I refer to the table or figure in text and link to it? 11.3 Objectives Link to tables or figures in text. 11.4 How to refer to tables and figures in text? In order to use this referencing style, you must use the following in the YAML output: bookdown::pdf_document2 Or for HTML: output: bookdown::html_document2 Or for word: output: bookdown::word_document2 This is a new version of document that supports a better way to reference things in text. This reads as: Make the output the HTML/PDF/Word document from the bookdown package. That is, the special :: after bookdown, bookdown::html_document2 read as “The html_document2 function from the bookdown package”. 11.5 Your Turn Convert your output to use bookdown::html_document2 in your YAML. 11.6 Referencing a figure To refer to a figure, you write the following in your text: Figure \\@ref(fig:chunk-name)) 11.6.1 Demo ``{r gg-oz-plot, fig.cap = &quot;Life expectancy from 1952 - 2007 for Australia. Life expentancy increases steadily except from 1962 to 1969. We can safely say that our life expectancy is higher than it has ever been!&quot;} library(ggplot2) library(dplyr) gapminder %&gt;% filter(country == &quot;Australia&quot;) %&gt;% ggplot(aes(x = year, y = lifeExp)) + geom_point() ``` Australia&#39;s life expectancy has increased a great deal over the past 50 years (See Figure \\@ref(fig:gg-oz-plot)) library(ggplot2) library(dplyr) gapminder %&gt;% filter(country == &quot;Australia&quot;) %&gt;% ggplot(aes(x = year, y = lifeExp)) + geom_point() Figure 11.1: Life expectancy from 1952 - 2007 for Australia. Life expentancy increases steadily except from 1962 to 1969. We can safely say that our life expectancy is higher than it has ever been! Australia’s life expectancy has increased a great deal over the past 50 years (See Figure 11.1) 11.6.2 Your Turn Add a new plot in your document and reference it 11.7 Referencing a table To cite a table, you write the following: Table \\@ref(tab:chunk-name)) `markdown ``{r gg-oz-tab} gapminder %&gt;% filter(country == &quot;Australia&quot;) %&gt;% knitr::kable(caption = &quot;Raw gapminder data for Australia.&quot;) We can see below in Table 11.1 the raw data used to create Figure 11.1). gapminder %&gt;% filter(country == &quot;Australia&quot;) %&gt;% knitr::kable(caption = &quot;Raw gapminder data for Australia.&quot;) Table 11.1: Raw gapminder data for Australia. country continent year lifeExp pop gdpPercap Australia Oceania 1952 69.120 8691212 10039.60 Australia Oceania 1957 70.330 9712569 10949.65 Australia Oceania 1962 70.930 10794968 12217.23 Australia Oceania 1967 71.100 11872264 14526.12 Australia Oceania 1972 71.930 13177000 16788.63 Australia Oceania 1977 73.490 14074100 18334.20 Australia Oceania 1982 74.740 15184200 19477.01 Australia Oceania 1987 76.320 16257249 21888.89 Australia Oceania 1992 77.560 17481977 23424.77 Australia Oceania 1997 78.830 18565243 26997.94 Australia Oceania 2002 80.370 19546792 30687.75 Australia Oceania 2007 81.235 20434176 34435.37 11.7.1 Your Turn Create a table in your document and refer to it in text 11.8 Referencing a section You can even reference a section in your report: \\@ref(slug)) However, in order to write this, you need to include slug in your markdown header, like so: ## your amazing header {#slug} For example, I can refer to the first section (Section 11) in this document by referring to the section as \\@ref(start) because it was written as: # Citing Figures, Tables &amp; Sections {#start} 11.8.1 Your Turn Reference a section in the report. "],
["citating-articles-bibliography-styles.html", "12 Citating Articles &amp; Bibliography Styles 12.1 Overview 12.2 Questions 12.3 Objectives 12.4 How to cite things 12.5 How to change the bibliography style 12.6 How to move the bibliography location", " 12 Citating Articles &amp; Bibliography Styles Now that you are near the end of your data analysis, you want to make sure that you’ve plugged in the gaps of REF1 REF2 and so on correctly cited the articles and software you wanted to mention. 12.1 Overview Teaching Exercises 12.2 Questions What sort of things can I cite? How do I manage my .bib file? How do I change the citation style? 12.3 Objectives Provide a bibliography at the end of the document Cite articles and packages during the document learn how to manage citation styles 12.4 How to cite things Citing things in an rmarkdown document is straightforward, you refer to articles you want to cite using [@article-handle]. Here, article-handle matches the article handle in your .bib file. This .bib file is referred to in the YAML of your document, under the option bibliography: filename.bib: --- title: author: output: html_document bibliography: references.bib --- 12.4.1 What is a .bib file? Good question. .bib is a format for storing references from the haydey of LaTeX. It contains scripts with reference information for the article. Here’s an example one @Book{ggplot2, author = {Hadley Wickham}, title = {ggplot2: Elegant Graphics for Data Analysis}, publisher = {Springer-Verlag New York}, year = {2016}, isbn = {978-3-319-24277-4}, url = {http://ggplot2.org}, } 12.4.2 And how do I generate these .bib files? You can use the citation function in R for R itself, and for specific R packages. We can get the citation for R with: citation() ## ## To cite R in publications use: ## ## R Core Team (2017). R: A language and environment for ## statistical computing. R Foundation for Statistical Computing, ## Vienna, Austria. URL https://www.R-project.org/. ## ## A BibTeX entry for LaTeX users is ## ## @Manual{, ## title = {R: A Language and Environment for Statistical Computing}, ## author = {{R Core Team}}, ## organization = {R Foundation for Statistical Computing}, ## address = {Vienna, Austria}, ## year = {2017}, ## url = {https://www.R-project.org/}, ## } ## ## We have invested a lot of time and effort in creating R, please ## cite it when using it for data analysis. See also ## &#39;citation(&quot;pkgname&quot;)&#39; for citing R packages. And for ggplot2 with citation(&quot;ggplot2&quot;) ## ## To cite ggplot2 in publications, please use: ## ## H. Wickham. ggplot2: Elegant Graphics for Data Analysis. ## Springer-Verlag New York, 2016. ## ## A BibTeX entry for LaTeX users is ## ## @Book{, ## author = {Hadley Wickham}, ## title = {ggplot2: Elegant Graphics for Data Analysis}, ## publisher = {Springer-Verlag New York}, ## year = {2016}, ## isbn = {978-3-319-24277-4}, ## url = {https://ggplot2.tidyverse.org}, ## } For journals or books, you’ll need to get a specific .bib file. Yes, this can be a bit of a pain, but this is where you need to use a reference management software like Zotero, Mendeley, papers, or my personal preference paperpile. The important thing to to use something. These all allow you to get .bib files of your articles, which you can then placec in your references.bib file. 12.4.3 ## Your Turn Generate a references.bib file to place your citations Using the citation() function, generate citations for the packages we have used, “dplyr”, “ggplot2”, “gapminder”, and for the R software, place these in your references.bib file Reference these in your document Add a final heading in your file called #bibliography Render the document 12.5 How to change the bibliography style OK so now you’ve got your bibliography, but you now need to change it to a specific journal format. Luckily, this is now pretty easy. You can change your citation style from the citation style language Similar to how you referred to your .bib file with bibliography: ref.bib, you do something similar: --- title: author: output: html_document bibliography: references.bib csl: my_journal.csl --- 12.5.1 ## Your Turn select your bibliography style to be one from your favourite journal at the CSL github repo here: https://github.com/citation-style-language/styles (&gt; 1800 citations and counting) place this in your rstudio project refer to it in the YAML Render your document and observe your greatness 12.6 How to move the bibliography location The bibliography is typically placed at the end of the document, so your last heading should be something like # References. However, if you want to move it, you need to use the bookdown::html_document2() output option, and then in your document, place the following piece of text in the reference section. For example. # Introduction # References {-} &lt;div id=&quot;refs&quot;&gt;&lt;/div&gt; # Appendix Note the reference section, the code: &lt;div id=&quot;refs&quot;&gt;&lt;/div&gt; This is taken from this SO thread. Note that the answer also states: Note: this will only work if you use pandoc’s built-in citation package and won’t work if you set citation_package: natbib in the YAML 12.6.1 ## Your Turn Generate a bibliography and an appendix that follows it "],
["captioning-and-referencing-equations.html", "13 Captioning and referencing equations 13.1 Overview 13.2 Questions 13.3 Numbering equations 13.4 Referencing equations", " 13 Captioning and referencing equations This section introduces how to add captions to equations, and reference them in text. Note that when using captioning, you need to use the bookdown::html_document2 output. 13.1 Overview Teaching: 5 minutes Exercises: 5 minutes 13.2 Questions How do I caption an equation? How do I reference an equation? 13.2.1 Numbering equations You can provide a number for an equation by adding \\begin{equation} along with a label, provided with (\\#eq:label) \\[ \\begin{equation} Y \\sim X\\beta_0 + X\\beta_1 + \\epsilon \\tag{13.1} \\end{equation} \\] You can then refer to the equation in text using \\@ref(eq:model): Our model is given in (13.1) If you want to provide a specific number to the equation, you can use \\tag{XX.XX} \\[ Y \\sim X\\beta_0 + X\\beta_1 + \\epsilon \\tag{1} \\] 13.3 Numbering equations 13.4 Referencing equations "],
["common-problems-with-rmarkdown-and-some-solutions.html", "14 Common Problems with rmarkdown (and some solutions) 14.1 Avoiding problems 14.2 The errors 14.3 “Duplication”: Duplicated chunk names 14.4 “Not what I ordered”: Objects not created in the right order 14.5 “Forgotten Trails I”: Missing “,”, or “(”, “}”, or “’” 14.6 “Forgotten Trails II”: Chunk option with trailing &quot;, or not input 14.7 “Forgotten Trail III”: 14.8 “The Path Not Taken” File path incorrect 14.9 “Spolling I” Incorrectly spelled chunk options 14.10 “Spolling II” Incorrectly spelled chunk option inputs 14.11 “The Legend of Link I”: Your images in ![]() don’t work. 14.12 LaTeX errors 14.13 I want to include inline R code verbatim to show an example 14.14 Your Turn", " 14 Common Problems with rmarkdown (and some solutions) There are some things that I run into fairly frequently (and some not so much) when I’m rendering my rmarkdown documents. This section details some the common problems, and the solution that I have found works for me. If you want to practice on fixing broken rmarkdown documents, check out some pathologically broken examples on github at njtierney/rmd-errors. 14.1 Avoiding problems To avoid problems in the first place, I try and do the following: Develop code in chunks and execute the chunks until they work, then move on. knit the document regularly to check for errors. Then, if there is an error: recreate the error in an interactive session: restart R run all chunks below find the chunk that did not work, fix until it does run all chunks below explore working directory issues remember that the rmarkdown directory is where the .Rmd file lives 14.2 The errors What follows from here are all the errors you might in an rmarkdown document, with the following structure: What they might look like What the error message might appear to be, and How to solve them 14.3 “Duplication”: Duplicated chunk names What it might look like Chunks like this: ```{r title-one} ``` ```{r title-one} ``` The error message This is caught before the document compiles with a warning like: processing file: common-problems.Rmd Error in parse_block(g[-1], g[1], params.src) : duplicate label &#39;title-one&#39; Calls: local ... process_file -&gt; split_file -&gt; lapply -&gt; FUN -&gt; parse_block Execution halted Error in Rscript_render(f, render_args, render_meta) : Failed to compile common-problems.Rmd Calls: &lt;Anonymous&gt; ... render_book -&gt; render_new_session -&gt; Rscript_render Execution halted The important part to note is the start: . . . Error in parse_block(g[-1], g[1], params.src) : duplicate label &#39;title-one&#39; . . . How to solve In our case we have the same chunk name twice: ‘title-one’. Change the chunk name of one of them! 14.4 “Not what I ordered”: Objects not created in the right order What it might look like plot(my_table) my_table &lt;- table(mtcars$cyl) The error message How to solve 14.5 “Forgotten Trails I”: Missing “,”, or “(”, “}”, or “’” What it might look like The error message How to solve 14.6 “Forgotten Trails II”: Chunk option with trailing &quot;, or not input What it might look like The error message processing file: rstudio.Rmd (*) NOTE: I saw chunk options &quot;fig-rstudio-workspace-options, fig.cap = &quot;Setting the options right for rstudio, so you don&#39;t restore previous sessions work, and don&#39;t save it either.&quot; please go to https://yihui.name/knitr/options (it is likely that you forgot to quote &quot;character&quot; options) Error in parse(text = code, keep.source = FALSE) : &lt;text&gt;:1:51: unexpected INCOMPLETE_STRING 1: alist( &#39;fig-rstudio-workspace-options&#39;, fig.cap = &quot;Setting the options right for rstudio, so you don&#39;t restore previous sessions work, and don&#39;t save it either. ) How to solve it? The easiest way is to do Cmd+Shift+F, which opens up a global search in your rstudio project, and then type in the offending string mentioned in the NOTE. In this case, I would search for the partial string &quot;fig.cap = &quot;Setting the options right for rstudio, so you don't restore previous sessions work, and. I search for the partial string because there might be parts at the end of the error message that aren’t in the text. 14.7 “Forgotten Trail III”: What it might look like The error message processing file: figures-tables-captions.Rmd (*) NOTE: I saw chunk options &quot;read-gapminder include = FALSE, echo = FALSe&quot; please go to https://yihui.name/knitr/options (it is likely that you forgot to quote &quot;character&quot; options) Error in parse(text = code, keep.source = FALSE) : &lt;text&gt;:1:23: unexpected symbol 1: alist( read-gapminder include ^ How to solve This error message is pretty good, I needed to add a comma after my chunk name. So, go from: ``{r read-gapminder include = FALSE, echo = FALSE} gapminder &lt;- readr::read_csv(here::here(&quot;data&quot;, &quot;gapminder.csv&quot;)) ``` to ``{r read-gapminder, include = FALSE, echo = FALSE} gapminder &lt;- readr::read_csv(here::here(&quot;data&quot;, &quot;gapminder.csv&quot;)) ``` 14.8 “The Path Not Taken” File path incorrect What it might look like The error message How to solve 14.9 “Spolling I” Incorrectly spelled chunk options These are often not an error, but you just won’t get the behaviour that you expect. What it might look like fig.caption instead of fig.cap. This once caused me to rewrite a lot of code and an entire section of a paper until I realised the problem. The error message How to solve There might be a switch you can flick to ask knitr to solve 14.10 “Spolling II” Incorrectly spelled chunk option inputs So this is when you provide the wrong input to your chunk options. Like something that requires TRUE gets “yes”, or something that needs &quot;100%&quot; instead gets 100 What it might look like The error message Quitting from lines 31-32 (figures-tables-captions.Rmd) Error in eval(x, envir = envir) : object &#39;FALSe&#39; not found Calls: local ... process_group.block -&gt; call_block -&gt; eval_lang -&gt; eval -&gt; eval Execution halted Error in Rscript_render(f, render_args, render_meta) : Failed to compile figures-tables-captions.Rmd Calls: &lt;Anonymous&gt; ... render_book -&gt; render_new_session -&gt; Rscript_render Execution halted How to solve What was the problem? Turns out I provided the option FALSe instead of FALSE. Go from: ``{r read-gapminder include = FALSE, echo = FALSe} gapminder &lt;- readr::read_csv(here::here(&quot;data&quot;, &quot;gapminder.csv&quot;)) ``` to ``{r read-gapminder, include = FALSE, echo = FALSE} gapminder &lt;- readr::read_csv(here::here(&quot;data&quot;, &quot;gapminder.csv&quot;)) ``` 14.11 “The Legend of Link I”: Your images in ![]() don’t work. I often forget that it is ![](path/to/image), and note ![](&quot;path/to/image&quot;). There are no quote marks! 14.12 LaTeX errors There is no panacea for LaTeX errors, but if you aren’t familiar with “what that error message” might look like, here are some details. What it might look like The error message How to solve 14.13 I want to include inline R code verbatim to show an example … Like for a book on using rmarkdown or something. Check out this great blog post by T. Hovorka from R Views It boils down to this: `` `r &quot;\\u0060r expression\\u0060&quot;` ``. 14.14 Your Turn Go to this repo njtierney/rmd-errors, and give debugging some of these common rmarkdown errors a go. "],
["different-outputs-and-extensions.html", "15 Different Outputs and Extensions 15.1 Alternative output formats 15.2 Tufte", " 15 Different Outputs and Extensions There are many different outputs for rmarkdown - as a start, THIS VERY BOOK IS WRITTEN IN RMARKDOWN! How cool is that? 15.1 Alternative output formats write a book with bookdown build a website with blogdown slideshows HTML: xaringan HTML: slidy HTML: ioslides PDF: beamer powerpoint create a simple dashboard with flexdashboard generate learning exercises with learnr generate multiple reports with parameterised reports 15.2 Tufte tufte 15.2.1 For Journals rticles 15.2.2 APA papaja 15.2.3 Misc rmdformats Bob Rudis’ markdown templates prettydoc by Yixuan Qiu svm r templates by Steve Miller "],
["next-steps.html", "16 Next Steps 16.1 Learn how to use git and github", " 16 Next Steps So now you’ve got a handle on rmarkdown, what are some of the other things to think about learning? Here are some of my recommendations. 16.1 Learn how to use git and github git is a version control system. Not sure what a version control system is? No worries, let me explain. If you’ve ever named a document something like: Final Final 2 Really final Relevant PhD comics link Or even if you have something like: 2018-10-10-document.Rmd 2018-10-11-document.Rmd These are ways of managing which version you have "],
["references.html", "17 References", " 17 References R Markdown: The Definitive Guide Bookdown The RStudio cheatsheet The official documentation of knitr R4ds section on rmarkdown Extending word templates: http://rmarkdown.rstudio.com/articles_docx.html Templates: https://github.com/Pakillo/rmdTemplates Notebooks: http://rmarkdown.rstudio.com/r_notebooks.html rmarkdown chapter in R for data science knitr in a nutshell Maëlle Salmon’s Rmarkdown course Jennifer Thompson’s Rmarkdown course happy git with r "],
["acknowledgements.html", "18 Acknowledgements", " 18 Acknowledgements This books was first written to be a guide for a course run by the Statistics Society Australia (SSA), and Melbourne Integrative Genomics (MIG) on November 12, 2018. I’d like to first thank Miles McBain, for his working book, “Git For Scientists”. This book inspired the structure and workflow of this existing book. I’d also like to thank Karthik Ram, Yoav Ram, Martin Fenner, Puneet Kishor, and Jonathan Dugan, involved with the Scholarly Markdown site. This has helped inform some of the structure of this book. I’d also like to thank Patrick Robotham for his helpful discussions when first creating this book. "],
["templates.html", "19 Templates 19.1 Controlling the outputs 19.2 How do I set options specific to each output", " 19 Templates 19.1 Controlling the outputs Depending on the output type, HTML, PDF, or word, you can actually control how the document looks 19.1.1 Options for HTML Some common options for HTML include: Adding tab sets floating table of contents 19.1.2 Options for PDF Adding page breaks injecting LaTeX into your rmarkdown document 19.1.3 Options for Word templates using .doct files 19.2 How do I set options specific to each output Sometimes you might want to have specific output changes to "],
["faq.html", "20 FAQ 20.1 How can I include a screenshot of an interactive graphic in PDF or Word?", " 20 FAQ ( A place for questions) 20.1 How can I include a screenshot of an interactive graphic in PDF or Word? You might wish to include a screenshot of an interactive graphic you had in your HTML document. To do this, you will need the webshot package, and will need the following code in your rmarkdown document. I recommend using the webshot package. "],
["html-document-extensions.html", "21 HTML document extensions 21.1 Your turn", " 21 HTML document extensions Some common options for HTML include: Adding tab sets floating table of contents 21.0.1 Adding Tab sets A tab set looks like the following: #### Example tab set {.tabset} ##### Tab 1 &gt; Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque sed eleifend velit. Sed porta pulvinar lorem ut rutrum. Etiam quis cursus libero. Donec nibh nisl, auctor quis sem in, feugiat convallis odio. Ut at euismod ligula. Nullam vitae quam non lacus scelerisque tempus. Sed tincidunt massa non nunc tincidunt feugiat. In hac habitasse platea dictumst. ##### Tab 2 ```{r tab-plot}` r&#39;&#39; plot(iris$Sepal.Length, iris$Sepal.Width) ``` To add a tab set, you include {.tabset} after your heading 21.0.2 Floating table of contents A floating table of contents can be added 21.1 Your turn Add tab sets to your document Add a floating table of contents "]
]
